# charpentier

Charpentier is a devops tool to automate task on multiple projects with différents
technology, tooling and environnement.

***This is the future readme of the v1 of the charpentier project in the idea of [Readme Driven Design ](http://tom.preston-werner.com/2010/08/23/readme-driven-development.html)***


If for example you have a small team of 5 to 50 developpers, 5 to 25 active client, 5 to 500 legacy project
you support multiple technologie maybe js, ruby, python and more
you have a lot of command line tools to automate everythig 
you need to support multiple environnements some in your own infrasctructure
you want to onboard new developper 
document everithing
and standardise all you can

Charpentier can help

```cmd
$ jm
Charpentier, Simple devops tools for small teams
Name after Jean-Marie Charpentier, he is friendly you can call him jm

  Usage: jm [--help] compile
```
## Install

```
$ gem install charpentier
```

## v1

## portfolio

Now you can clone the team portfolio of projects or create your own

```
$ gem portfolio create personnal-projects
  new portfolio in ~/.charpentier/portfolio/personnal-projects

$ gem portfolio clone root@githosting.example.com:team-portfolio
  clone portfolio in ~/.charpentier/portfolio/team-portfolio
```

## common interface for multiple tool

If your using multiple technologie you have a lot of tools to automate task on your projects
- yeoman to generate scaffolding
- 2 or 3 js task runner like gulp and grunt to automate js tasks
- capistrano to deploy rails projects
- rake to automate things
- a bunch of shell scripts
- artisan, drush composer for php project
- a lot of test runner for front end and backend

Whith charpentier you can configure a common command line interface 

## Clone team project
Now the new developper can work with all the team project

```
$ jm project
  name        | path                | portfolio
  ------------|---------------------|----------
  project_a   | ***no local path*** | team-portfolio
  project_b   | ***no local path*** | team-portfolio
  project_c   | ***no local path*** | team-portfolio
  charpentier | ***no local path*** | personnal-projects

$ jm clone --worspace ~/Sites project_a 
Cloning into ~/Sites/project_a...

$ jm project
$ jm project
  name        | path                | portfolio
  ------------|---------------------|----------
  project_a   |~/Sites/project_a    | team-portfolio
  project_b   | ***no local path*** | team-portfolio
  project_c   | ***no local path*** | team-portfolio
  charpentier | ***no local path*** | personnal-projects

$ jm cd project_a
$ pwd
~/Sites/project_a.com

$ pwd
~/Sites/project_a.com
```

## Manage multiple environnement

```
$ jm -p project_a env
  local
  stage
  prod

$ jm -p project_a -e prod deploy
  deploy project_a on prod environnement
  using variable from 
  ~/.charpentier/projects/project_a/charpentier.yml
  and override with environnements from
  ~/.charpentier/env/prod/project_a/charpentier.yml
```

If you want to run a lot of command for a project you can tel

```
$ jm project project_a
  charpentier will use project_a
  using variable from 
  ~/.charpentier/projects/project_a/charpentier.yml
$ jm env local
  charpentier will use project_a with local environnement
  using variable from 
  ~/.charpentier/projects/project_a/charpentier.yml
  and override with environnements from
  ~/.charpentier/env/prod/project_a/charpentier.yml
$ jm merge stage prod
  project: project_a, environnement: local
  charpentier mergin stage branch to prod
  OK
$ jm check
  project: project_a, environnement: local
  charpentier run unit test and static analysis
  OK
$ jm deploy
  project: project_a, environnement: local
  deploy project_a on prod environnement root@10.0.0.123
  OK
```

## project configuration and files

Each project script data script and file are in this own folder inside the `~/.charpentier/projects/project` directory

You can override script and variable by environnement in `~/.charpentier/env/*/project` 

Everything in `~/.charpentier/env/local` is gitignore so each team member can have it's own configutation override

`~/.charpentier/env/prod` folder is also gitignore, to ensure we dont share production information to everyone
You can version prod environnement in a private repository accessible only to sysadmin

```
~/.charpentier
├── charpentier.yml
├── compiled
├── env
│   ├── local
│   ├── prod
│   ├── readme.md
│   └── stage
│       └── project_template
│           └── charpentier.yml
├── plugins
│   └── template.rb
├── projects
│   └── project_template
│       ├── charpentier.yml
│       ├── rakefile.rb
│       └── recipes
│           ├── complete_recipe
│           │   ├── data.yml
│           │   ├── file.conf
│           │   └── script.sh
│           └── simple_recipes.sh
├── rakefile.rb
└── readme.md
```

## rake

## sunzi

## gitgot

## gitolite

Charpentier integrate with gitolite as your main git hosting or as a mirror.

## v2 plugin system

## Simple provisionner

### Webhook Plugin

Charpentier commands can be trigger by web hook, you can call them from CI server, github or gitlab

### Lita plugin

Install charpentier lita plugin so you can invoke commands by chat or have notification


### build your own plugins

## project data
If you want to share the charpentier data with developper outside of your team you can also put the
project folder inside the repository

```
~/Sites/project_example/charpentier
├── charpentier.yml
├── compiled
├── recipes
│   ├── complete_recipe
│   │   ├── data.yml
│   │   ├── file.conf
│   │   └── script.sh
│   └── simple_recipes.sh
└── roles
    └── local.yml
```

## v3 Language angonstic

The only dependencies for the core are docopt, moustache and yml

